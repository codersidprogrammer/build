{"version":3,"sources":["Pages/SettingsPage/Components/header.js"],"names":["apiCancelToken","generateCancelToken","api","ApiService","SettingsHeader","props","dispatch","useAppDispatch","boxState","useTypedReduxSelector","state","box","appState","app","useState","isCodeShow","setCodeShow","theme","useTheme","handleSaveBoxSettings","a","dataSettingsUpdate","boxToken","boxLayout","JSON","stringify","boxSettings","layout","boxDataField","dataField","boxActiveConnection","activeConnection","boxConfigConnection","connection","dataBoxUpdate","boxName","boxTagName","boxDescription","setFetchingState","updateAll","updateBoxSettings","updateBox","response","status","message","severity","isOpen","fetchingStatus","console","error","container","justify","alignItems","direction","item","xs","md","lg","style","marginBottom","separator","fontSize","aria-label","color","to","variant","component","width","height","spacing","backgroundColor","palette","success","main","size","startIcon","disabled","onClick","display","wrapLongLines","wrapLines","language","docco","boxId","getUntrackedObject"],"mappings":"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","file":"static/js/4.85815ba6.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\nimport { useTheme } from '@material-ui/styles';\r\nimport { Link } from 'react-router-dom';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport Loading from '@pages/BoxPage/Components/loadingBar';\r\nimport { useBoxState } from '@pages/BoxPage/Context/boxContextTracked';\r\nimport { useAppState } from '@globalContext/AppContextTracked';\r\nimport { getUntrackedObject } from 'react-tracked';\r\nimport SyntaxHighlighter from 'react-syntax-highlighter';\r\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\nimport ApiService, { generateCancelToken } from '@services/apiService';\r\nimport CodeIcon from '@material-ui/icons/Code';\r\nimport { useAppDispatch, useTypedReduxSelector } from '@store/Store';\r\nimport { setFetchingState } from '@store/AppSlice';\r\n\r\nconst apiCancelToken = generateCancelToken();\r\nconst api = new ApiService(apiCancelToken);\r\n\r\nexport default function SettingsHeader(props) {\r\n  const dispatch = useAppDispatch();\r\n  const boxState = useTypedReduxSelector(state => state.box);\r\n  const appState = useTypedReduxSelector(state => state.app);\r\n  const [isCodeShow, setCodeShow] = useState(false);\r\n  const theme = useTheme();\r\n\r\n  const handleSaveBoxSettings = async () => {\r\n    let dataSettingsUpdate = {\r\n      boxToken: boxState.boxToken,\r\n      boxLayout: JSON.stringify(boxState.boxSettings.layout),\r\n      boxDataField: JSON.stringify(boxState.boxSettings.dataField),\r\n      boxActiveConnection: boxState.boxSettings.activeConnection,\r\n      boxConfigConnection: JSON.stringify(boxState.boxSettings.connection),\r\n    };\r\n\r\n    let dataBoxUpdate = {\r\n      boxToken: boxState.boxToken,\r\n      boxName: boxState.boxName,\r\n      boxTagName: boxState.boxTagName,\r\n      boxDescription: boxState.boxDescription,\r\n    }\r\n\r\n    try {\r\n      dispatch(setFetchingState(true));\r\n      const response = await api.updateAll([\r\n        api.updateBoxSettings(boxState.boxToken, dataSettingsUpdate),\r\n        api.updateBox(boxState.boxToken, dataBoxUpdate)\r\n      ]);\r\n\r\n      if (response[0].status === 200 && response[1].status === 200) {\r\n        dispatch(setFetchingState({\r\n          message: 'Box Settings has been saved, Congratulations!',\r\n          severity: 'success',\r\n          isOpen: true,\r\n          fetchingStatus: false,\r\n        }));\r\n      }\r\n    } catch (error) {\r\n      console.error('Box Settings', error);\r\n      dispatch(setFetchingState({\r\n        message: 'Something wrong, while updating your box settings :(',\r\n        severity: 'error',\r\n        isOpen: true,\r\n        fetchingStatus: false,\r\n      }));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Grid container justify=\"space-between\" alignItems=\"center\" direction=\"row\">\r\n      <Grid item xs={8} md={6} lg={6}>\r\n        <Breadcrumbs style={{ marginBottom: 10 }} separator={<NavigateNextIcon fontSize=\"small\" />} aria-label=\"breadcrumb\">\r\n          <Link color=\"inherit\" to={`/box/${boxState.boxToken}`}>\r\n            Box\r\n          </Link>\r\n          <Typography color=\"textPrimary\">Settings</Typography>\r\n        </Breadcrumbs>\r\n        <Typography variant=\"h4\" component=\"h2\">\r\n          {boxState.boxName === '' ? (<Loading width={400} height={40} />) : `Settings: ${boxState.boxName}`}\r\n        </Typography>\r\n        <Typography variant=\"subtitle1\" component=\"h4\" color=\"textSecondary\">\r\n          {boxState.boxTagName === '' ? (<Loading width={300} height={20} />) : boxState.boxTagName}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={4} md={6} lg={6}>\r\n        <Grid container spacing={2} direction=\"row\" justify=\"flex-end\" alignItems=\"center\">\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              style={{ backgroundColor: theme.palette.success.main, color: 'white' }}\r\n              size=\"large\"\r\n              startIcon={appState.fetchingStatus ? null : <CodeIcon />}\r\n              disabled={appState.fetchingStatus}\r\n              onClick={() => setCodeShow(state => state = !state)}\r\n            >\r\n              {appState.fetchingStatus ? (<CircularProgress color=\"primary\" />) : 'Code'}\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              size=\"large\"\r\n              startIcon={appState.fetchingStatus ? null : <SaveIcon />}\r\n              disabled={appState.fetchingStatus}\r\n              onClick={handleSaveBoxSettings}\r\n            >\r\n              {appState.fetchingStatus ? (<CircularProgress color=\"primary\" />) : 'Save'}\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid style={{ display: isCodeShow ? 'block' : 'none' }} item xs>\r\n        <Typography variant=\"textPrimary\" component=\"h4\" color=\"textPrimary\">\r\n          Developer code it used to see and analyze how your box was configured. This data is on JSON Format.\r\n          You can save it for later. Or, you just wanna see whats going on with your box.\r\n        </Typography>\r\n        <Typography variant=\"subtitle1\" component=\"h6\" color=\"textSecondary\">\r\n          Your Box Code:\r\n        </Typography>\r\n        <SyntaxHighlighter\r\n          wrapLongLines={true}\r\n          wrapLines={false}\r\n          language=\"json\" style={docco}>\r\n          {`{\r\n  boxId:${JSON.stringify(boxState.boxId)},\r\n  boxToken:${JSON.stringify(boxState.boxToken)},\r\n  boxName:${JSON.stringify(boxState.boxName)},\r\n  boxTagName:${JSON.stringify(boxState.boxTagName)},\r\n  boxDescription:${JSON.stringify(boxState.boxDescription)},\r\n}`}\r\n        </SyntaxHighlighter>\r\n        <Typography variant=\"subtitle1\" component=\"h4\" color=\"textSecondary\">\r\n          Your box settings code:\r\n        </Typography>\r\n        <SyntaxHighlighter\r\n          wrapLongLines={true}\r\n          wrapLines={false}\r\n          language=\"json\" style={docco}>\r\n          {JSON.stringify(getUntrackedObject(boxState.boxSettings))}\r\n        </SyntaxHighlighter>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}"],"sourceRoot":""}